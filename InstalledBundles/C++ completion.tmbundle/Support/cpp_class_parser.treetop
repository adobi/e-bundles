grammar Cpp
rule cpp
statement+ {
	def types(scope, r = {})
		#r = { :field => {}, :typedefs => {}, :classes => {}}
		elements.each do |e|
			key, value, type = e.types(scope)
			puts "key->" + key.inspect
			if key && value
			  if key == :current_type
			    r[key] = value
		    elsif type
		      helper(r, key, value, type )
		        
			  end
		  end
		end
		return r
	end
	
  def helperhelper(ipoint, value)
	  value.each do |k,v|
      if v.kind_of?(Hash) && ipoint[k]
        helperhelper(ipoint[k], v)
      else
        ipoint[k] = v
      end
    end
    
  end
  
	def helper(dict, key, value, type )
	  dict[type] ||= {}
    ipoint = dict[type][key]
    if ipoint.kind_of?(Hash)
      helperhelper(ipoint, value)
    else
      dict[type][key] = value
    end
  end
}
end

rule statement
class_def
/
type_def
/ complete_declare
/
current_type
/
allan_macro
/dec 
{
	def types(scope)
	end
}
/ 
string {
	def types(scope)
	end
}
/ pre_processor
/ braces
/ other {
	def types(scope)
	end
}
end

rule pre_processor
 '#' ((!('\\' EOL ) . )* '\\' EOL )* (!EOL .)* EOL {
   def types(scope)
   end
 }
end

rule EOL
 [\n]
end

rule type_def
'typedef' (explicit_space 'typename')? explicit_space complete_declare {
	def types(scope)	  
	  key, value, type = complete_declare.types(scope)
    return key, value, :typedefs
	end
}
end

rule class_def
forward_declare / namespace explicit_space variable space (':' ( !('{' / ';') . )+ )? '{' ci:(class_internals+) '}' {
  def types(scope)
    rettype = namespace.namespace_type
    retkey = variable.text_value
    retvalue = {}
    
    ci.elements.each do |elem|
      key, value, type = elem.types(scope)
      if key && value && type

        retvalue[type] ||= {}
        if type == :methods
          if k = retvalue[type][key]
            k << value
          else
            retvalue[type][key] = [value]
          end
        else
          ipoint = retvalue[type][key]
          # instead of overwriting, Hashes are merged
          # allowing for namespaces (and classes) to be reopened.
	        if ipoint && ipoint.kind_of?(Hash)
	          ipoint.merge! value
          else
            retvalue[type][key] = value
          end
        end
      end
    end
    return retkey, retvalue, rettype
  end
}
end

rule forward_declare
  namespace explicit_space variable space ';' {
    def types(scope)
      return nil
      #return variable.text_value, {:forward => true}, namespace.namespace_type
    end
  }
end

rule namespace
  ('class' / 'namespace' / "struct" ) {
    def namespace_type
      if text_value == 'namespace'
        return :namespace
      else
        return :classes
      end
    end
  }
end

rule class_internals
  class_def / methods_def / braces / type_def/ complete_declare / string / pre_processor / anything_but_end_brace
end

rule anything_but_end_brace
  !'}' . {
     def types(scope)
     end
   }
end

rule braces
 ( '{' '}' / '{' bracesinner+ '}' ) {
   def types(scope)
   end
 }
end

rule bracesinner
	(!('{' / '}') . ) / braces
end

rule methods_def
  complete_declare space parens {
    def types(scope)
      key, value, type = complete_declare.types(scope)
      type = :methods if type == :field
      type = :smethods if type == :sfield
      value[:a] = parens.text_value
      return key, value, type
    end
  }
end

rule complete_declare
start:(beginnings space)? m:( modifiers explicit_space )* dec space variable en:(space "=" !"=")? {
	def types(scope)
	  #heuristic to separate multiplications from pointer declarations
	  unless start.empty?
	    t = start.text_value.strip
	    if t == "=" || t == ","
	      return nil
      elsif t == "(" && en.empty?
        return nil
      end
    end
    type = :field
    m.elements.each do |k|
      type = :sfield if k.modifiers.text_value == 'static'
    end
		return variable.text_value , dec.types(scope) , type
	end
}
end

rule current_type
	 qualifier method_chain prefix {
		def types(scope)
			r = method_chain.types(scope)
			r << {:prefix => prefix.text_value}
			q = qualifier.text_value
			unless q.empty?
			  r.first[:qualifier] = q.split('::')
			  unless q == '::'
			    r.first[:kind] = ( r.first[:kind] == :field ? :sfield : :smethods)
		    end
	    end
			return :current_type, r
		end
	}
end

rule qualifier
 '::'? (variable '::')*
end

rule method_chain
	( variable p:parens? tie )+ {
		def types(scope)
		  r = []
      elements.each do |elem|
        val = ( elem.p.empty? ? :field : :methods)
		    num = (elem.tie.text_value == "->" ? 1 : 0)
		    r <<  { :kind => val, :name => elem.variable.text_value, :dref => num }		  
		  end
		  #r << m.types(scope) unless m.empty? 
		  return r #.flatten
		end
	}
	
/
'(' space dref:"*"* space m1:method_chain? variable p:parens? ')' tie m2:method_chain? {
  def types(scope)
    r = []
    r = m1.types(scope) unless m1.empty?
    if p.empty?
	    val = :fields
	  else
		  val = :methods # + :access
	  end
	  num = dref.text_value.size + (tie.text_value == "->" ? 1 : 0)
    r <<  { :kind => val, :name => variable.text_value, :dref => num }		  
    r << m2.types(scope) unless m2.empty? 
    return r.flatten
  end
}

end

rule allan_macro
	'iterate' '(' space it:variable space ',' space dref:'*'* space mc:method_chain? variable p:parens? space ')' {
		def types(scope)
		    t = []
		    t << mc.types(scope) unless mc.empty?
		    if p.empty?
    	      val = :field
    		else
    		  val = :methods # + :access
    		end
    		t << { :kind => val, :name => variable.text_value, :dref => dref.text_value.size} 
		    
		    r = { :type_of => t.flatten, :iterator =>true  }
    		return it.text_value, r, :field
		end
}
end 

rule parens
 '(' ')' / '(' inner+ ')' 
end

rule inner
	(!('(' / ')') . ) / parens
end

rule prefix
 ([a-zA-Z_] [a-zA-Z0-9_]* )? caret
end

rule tie
	('.' / '->' )
end

rule caret
  !.
end

rule dec
std
/
declaration
end

rule std
"std::" variable template it:"::iterator"? pointer:"*"* {
	def types(scope) # key
	  key = :type
		r= template.types(scope)
		r[key] = "std::" + variable.text_value + it.text_value
		r[:pointers] = pointer.text_value.size()
		return r
	end

}
end

rule declaration
 text:("::"? variable )+ space pointer:"*"* {
	def types(scope) #key
 
	  key = :type
	  r = {}
	  r[key] = text.text_value
	  r[:pointers] = pointer.text_value.size()
		return r
	end
}
end

rule modifiers
  'static' / 'extern' / 'register' / 'mutable' / 'friend' / 'inline' / 'virtual' / 'const'
end

rule beginnings
"=" / "(" / ","
end


rule variable
[a-zA-Z_] [_a-zA-Z0-9]* {
	def types(scope)		 
	end
}
end

rule template
'<' space contains:(first:dec space following:(',' space val:dec )*)? space '>' {
	def types(scope)
		r = {}
		if contains.elements
			r[1] = contains.elements.first.types(scope)
			r[1][:scope] = scope
			if contains.following.elements
			  i = 2
			  contains.following.elements.each do |e|
			    r[i] =e.val.types(scope)
			    r[i][:scope] = scope
			    i+=1
		    end
		  end
		end
		
		return :t => r
	end
}
end

rule string
 '"' (!'"' . / '\"')* '"' {
   def types(scope)
   end
 }
end

rule space
 [ ]* 
end

rule explicit_space
 [ ]+
end	
rule other
.
end
end
